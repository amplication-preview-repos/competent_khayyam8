/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Recipient } from "./Recipient";
import { RecipientCountArgs } from "./RecipientCountArgs";
import { RecipientFindManyArgs } from "./RecipientFindManyArgs";
import { RecipientFindUniqueArgs } from "./RecipientFindUniqueArgs";
import { CreateRecipientArgs } from "./CreateRecipientArgs";
import { UpdateRecipientArgs } from "./UpdateRecipientArgs";
import { DeleteRecipientArgs } from "./DeleteRecipientArgs";
import { RecipientService } from "../recipient.service";
@graphql.Resolver(() => Recipient)
export class RecipientResolverBase {
  constructor(protected readonly service: RecipientService) {}

  async _recipientsMeta(
    @graphql.Args() args: RecipientCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Recipient])
  async recipients(
    @graphql.Args() args: RecipientFindManyArgs
  ): Promise<Recipient[]> {
    return this.service.recipients(args);
  }

  @graphql.Query(() => Recipient, { nullable: true })
  async recipient(
    @graphql.Args() args: RecipientFindUniqueArgs
  ): Promise<Recipient | null> {
    const result = await this.service.recipient(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Recipient)
  async createRecipient(
    @graphql.Args() args: CreateRecipientArgs
  ): Promise<Recipient> {
    return await this.service.createRecipient({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Recipient)
  async updateRecipient(
    @graphql.Args() args: UpdateRecipientArgs
  ): Promise<Recipient | null> {
    try {
      return await this.service.updateRecipient({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recipient)
  async deleteRecipient(
    @graphql.Args() args: DeleteRecipientArgs
  ): Promise<Recipient | null> {
    try {
      return await this.service.deleteRecipient(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecipientService } from "../recipient.service";
import { RecipientCreateInput } from "./RecipientCreateInput";
import { Recipient } from "./Recipient";
import { RecipientFindManyArgs } from "./RecipientFindManyArgs";
import { RecipientWhereUniqueInput } from "./RecipientWhereUniqueInput";
import { RecipientUpdateInput } from "./RecipientUpdateInput";

export class RecipientControllerBase {
  constructor(protected readonly service: RecipientService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Recipient })
  async createRecipient(
    @common.Body() data: RecipientCreateInput
  ): Promise<Recipient> {
    return await this.service.createRecipient({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Recipient] })
  @ApiNestedQuery(RecipientFindManyArgs)
  async recipients(@common.Req() request: Request): Promise<Recipient[]> {
    const args = plainToClass(RecipientFindManyArgs, request.query);
    return this.service.recipients({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Recipient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recipient(
    @common.Param() params: RecipientWhereUniqueInput
  ): Promise<Recipient | null> {
    const result = await this.service.recipient({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Recipient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecipient(
    @common.Param() params: RecipientWhereUniqueInput,
    @common.Body() data: RecipientUpdateInput
  ): Promise<Recipient | null> {
    try {
      return await this.service.updateRecipient({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Recipient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecipient(
    @common.Param() params: RecipientWhereUniqueInput
  ): Promise<Recipient | null> {
    try {
      return await this.service.deleteRecipient({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CampaignReport as PrismaCampaignReport,
  Campaign as PrismaCampaign,
} from "@prisma/client";

export class CampaignReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CampaignReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.campaignReport.count(args);
  }

  async campaignReports<T extends Prisma.CampaignReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignReportFindManyArgs>
  ): Promise<PrismaCampaignReport[]> {
    return this.prisma.campaignReport.findMany<Prisma.CampaignReportFindManyArgs>(
      args
    );
  }
  async campaignReport<T extends Prisma.CampaignReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignReportFindUniqueArgs>
  ): Promise<PrismaCampaignReport | null> {
    return this.prisma.campaignReport.findUnique(args);
  }
  async createCampaignReport<T extends Prisma.CampaignReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignReportCreateArgs>
  ): Promise<PrismaCampaignReport> {
    return this.prisma.campaignReport.create<T>(args);
  }
  async updateCampaignReport<T extends Prisma.CampaignReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignReportUpdateArgs>
  ): Promise<PrismaCampaignReport> {
    return this.prisma.campaignReport.update<T>(args);
  }
  async deleteCampaignReport<T extends Prisma.CampaignReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CampaignReportDeleteArgs>
  ): Promise<PrismaCampaignReport> {
    return this.prisma.campaignReport.delete(args);
  }

  async getCampaign(parentId: string): Promise<PrismaCampaign | null> {
    return this.prisma.campaignReport
      .findUnique({
        where: { id: parentId },
      })
      .campaign();
  }
}

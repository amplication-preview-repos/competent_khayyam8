/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CampaignReport } from "./CampaignReport";
import { CampaignReportCountArgs } from "./CampaignReportCountArgs";
import { CampaignReportFindManyArgs } from "./CampaignReportFindManyArgs";
import { CampaignReportFindUniqueArgs } from "./CampaignReportFindUniqueArgs";
import { CreateCampaignReportArgs } from "./CreateCampaignReportArgs";
import { UpdateCampaignReportArgs } from "./UpdateCampaignReportArgs";
import { DeleteCampaignReportArgs } from "./DeleteCampaignReportArgs";
import { Campaign } from "../../campaign/base/Campaign";
import { CampaignReportService } from "../campaignReport.service";
@graphql.Resolver(() => CampaignReport)
export class CampaignReportResolverBase {
  constructor(protected readonly service: CampaignReportService) {}

  async _campaignReportsMeta(
    @graphql.Args() args: CampaignReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CampaignReport])
  async campaignReports(
    @graphql.Args() args: CampaignReportFindManyArgs
  ): Promise<CampaignReport[]> {
    return this.service.campaignReports(args);
  }

  @graphql.Query(() => CampaignReport, { nullable: true })
  async campaignReport(
    @graphql.Args() args: CampaignReportFindUniqueArgs
  ): Promise<CampaignReport | null> {
    const result = await this.service.campaignReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CampaignReport)
  async createCampaignReport(
    @graphql.Args() args: CreateCampaignReportArgs
  ): Promise<CampaignReport> {
    return await this.service.createCampaignReport({
      ...args,
      data: {
        ...args.data,

        campaign: args.data.campaign
          ? {
              connect: args.data.campaign,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CampaignReport)
  async updateCampaignReport(
    @graphql.Args() args: UpdateCampaignReportArgs
  ): Promise<CampaignReport | null> {
    try {
      return await this.service.updateCampaignReport({
        ...args,
        data: {
          ...args.data,

          campaign: args.data.campaign
            ? {
                connect: args.data.campaign,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CampaignReport)
  async deleteCampaignReport(
    @graphql.Args() args: DeleteCampaignReportArgs
  ): Promise<CampaignReport | null> {
    try {
      return await this.service.deleteCampaignReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Campaign, {
    nullable: true,
    name: "campaign",
  })
  async getCampaign(
    @graphql.Parent() parent: CampaignReport
  ): Promise<Campaign | null> {
    const result = await this.service.getCampaign(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

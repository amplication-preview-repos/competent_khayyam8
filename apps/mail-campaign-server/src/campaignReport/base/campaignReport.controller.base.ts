/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampaignReportService } from "../campaignReport.service";
import { CampaignReportCreateInput } from "./CampaignReportCreateInput";
import { CampaignReport } from "./CampaignReport";
import { CampaignReportFindManyArgs } from "./CampaignReportFindManyArgs";
import { CampaignReportWhereUniqueInput } from "./CampaignReportWhereUniqueInput";
import { CampaignReportUpdateInput } from "./CampaignReportUpdateInput";

export class CampaignReportControllerBase {
  constructor(protected readonly service: CampaignReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CampaignReport })
  async createCampaignReport(
    @common.Body() data: CampaignReportCreateInput
  ): Promise<CampaignReport> {
    return await this.service.createCampaignReport({
      data: {
        ...data,

        campaign: data.campaign
          ? {
              connect: data.campaign,
            }
          : undefined,
      },
      select: {
        bounceCount: true,

        campaign: {
          select: {
            id: true,
          },
        },

        clickCount: true,
        createdAt: true,
        id: true,
        openCount: true,
        sentCount: true,
        spamCount: true,
        unsubscribedCount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CampaignReport] })
  @ApiNestedQuery(CampaignReportFindManyArgs)
  async campaignReports(
    @common.Req() request: Request
  ): Promise<CampaignReport[]> {
    const args = plainToClass(CampaignReportFindManyArgs, request.query);
    return this.service.campaignReports({
      ...args,
      select: {
        bounceCount: true,

        campaign: {
          select: {
            id: true,
          },
        },

        clickCount: true,
        createdAt: true,
        id: true,
        openCount: true,
        sentCount: true,
        spamCount: true,
        unsubscribedCount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CampaignReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campaignReport(
    @common.Param() params: CampaignReportWhereUniqueInput
  ): Promise<CampaignReport | null> {
    const result = await this.service.campaignReport({
      where: params,
      select: {
        bounceCount: true,

        campaign: {
          select: {
            id: true,
          },
        },

        clickCount: true,
        createdAt: true,
        id: true,
        openCount: true,
        sentCount: true,
        spamCount: true,
        unsubscribedCount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CampaignReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampaignReport(
    @common.Param() params: CampaignReportWhereUniqueInput,
    @common.Body() data: CampaignReportUpdateInput
  ): Promise<CampaignReport | null> {
    try {
      return await this.service.updateCampaignReport({
        where: params,
        data: {
          ...data,

          campaign: data.campaign
            ? {
                connect: data.campaign,
              }
            : undefined,
        },
        select: {
          bounceCount: true,

          campaign: {
            select: {
              id: true,
            },
          },

          clickCount: true,
          createdAt: true,
          id: true,
          openCount: true,
          sentCount: true,
          spamCount: true,
          unsubscribedCount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CampaignReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampaignReport(
    @common.Param() params: CampaignReportWhereUniqueInput
  ): Promise<CampaignReport | null> {
    try {
      return await this.service.deleteCampaignReport({
        where: params,
        select: {
          bounceCount: true,

          campaign: {
            select: {
              id: true,
            },
          },

          clickCount: true,
          createdAt: true,
          id: true,
          openCount: true,
          sentCount: true,
          spamCount: true,
          unsubscribedCount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
